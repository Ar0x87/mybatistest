<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.null01.mappers.HotelMapper">
    <resultMap id="HotelResultMap" type="com.null01.models.Hotel">
        <id column="id" property="id"/>
        <result column="hotelname" property="hotelname"/>
        <result column="address" property="address"/>
    </resultMap>

    <select id="getAll" resultMap="HotelResultMap">
        SELECT id, hotelname, address FROM hotel
    </select>

    <select id="getByName" resultMap="HotelResultMap" parameterType="java.lang.String">
        SELECT id, hotelname, address FROM hotel
        WHERE lower(hotelname) LIKE lower(#{name})
    </select>

    <select id="postJ" resultType="java.lang.Integer" parameterType="java.util.Map">
        CREATE OR REPLACE FUNCTION postJ(varchar(30), varchar(20)) RETURNS INTEGER AS $$
            BEGIN
                IF ((SELECT hotelname AS vibor FROM hotel WHERE hotelname = $1) IS NULL)
                THEN
                    INSERT INTO hotel(id, hotelname, address) VALUES ((SELECT max(id) + 1 from hotel), $1 , $2 );
                ELSE
                    SELECT pg_cancel_backend(1);
                END IF;
                RETURN (SELECT id FROM hotel WHERE hotelname = $1);
            END;
        $$ LANGUAGE plpgsql;

        SELECT postJ(#{hotelname}, #{address});
    </select>

    <select id="putJ" resultType="java.lang.Integer" parameterType="java.util.Map">
        CREATE OR REPLACE FUNCTION putJ(integer, varchar(30), varchar(20)) RETURNS INTEGER AS $$
            BEGIN
                IF ((SELECT id FROM hotel WHERE id = $1) IS NOT NULL)
                THEN
                    UPDATE hotel SET hotelname = $2, address = $3 WHERE id = $1;
                ELSE
                    SELECT pg_cancel_backend(1);
                END IF;
            RETURN (SELECT id FROM hotel WHERE id = $1);
            END;
        $$ LANGUAGE plpgsql;

        SELECT putJ(CAST(#{id} AS INTEGER), #{hotelname}, #{address});
    </select>

    <select id="delJ" resultType="java.lang.Integer" parameterType="java.lang.Integer">
        CREATE OR REPLACE FUNCTION delJ(integer) RETURNS INTEGER AS $$
            BEGIN
                IF ((SELECT id FROM hotel WHERE id = $1) IS NOT NULL)
                THEN
                    DELETE FROM hotel WHERE id = $1;
                ELSE
                    SELECT pg_cancel_backend(1);
                END IF;
            RETURN ($1);
            END;
        $$ LANGUAGE plpgsql;

        SELECT delJ(#{id});
    </select>

    <select id="delJ" resultType="java.lang.Integer" parameterType="java.lang.String">
        CREATE OR REPLACE FUNCTION delJ(varchar(30)) RETURNS INTEGER AS $$
            DECLARE
                aim int ;
            BEGIN
                aim = (SELECT id FROM hotel WHERE hotelname = $1);
                IF (aim IS NOT NULL)
                THEN
                    DELETE FROM hotel WHERE id = aim;
                ELSE
                    SELECT pg_cancel_backend(1);
                END IF;
            RETURN aim;
            END;
        $$ LANGUAGE plpgsql;
    </select>

</mapper>